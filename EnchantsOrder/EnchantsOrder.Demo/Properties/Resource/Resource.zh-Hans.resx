<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EnchantmentOptionDescription" xml:space="preserve">
    <value>设置您想要附魔的附魔</value>
  </data>
  <data name="ItemArgumentDescription" xml:space="preserve">
    <value>设置您想要列出的物品</value>
  </data>
  <data name="LangArgumentDescription" xml:space="preserve">
    <value>设置您想要设置的语言的语言代码</value>
  </data>
  <data name="LangCommandDescription" xml:space="preserve">
    <value>更改本程序的语言</value>
  </data>
  <data name="ListCommandDescription" xml:space="preserve">
    <value>列出物品的附魔列表</value>
  </data>
  <data name="OrderCommandDescription" xml:space="preserve">
    <value>对附魔进行排序</value>
  </data>
  <data name="PenaltyOptionDescription" xml:space="preserve">
    <value>设置您想要附魔的物品的惩罚</value>
  </data>
  <data name="RootCommandDescription" xml:space="preserve">
    <value>一个可以排序附魔的 EnchantsOrder 示例</value>
  </data>
  <data name="InputCommand" xml:space="preserve">
    <value>输入命令（输入 exit 退出）：</value>
  </data>
  <data name="AddedFormat" xml:space="preserve">
    <value>已添加 {0}</value>
  </data>
  <data name="CurrentLanguageChangedFormat" xml:space="preserve">
    <value>当前语言已修改为 {0}</value>
  </data>
  <data name="CurrentLanguageFormat" xml:space="preserve">
    <value>当前语言是 {0}</value>
  </data>
  <data name="EnchantsFileName" xml:space="preserve">
    <value>Enchants.zh-CN.json</value>
  </data>
  <data name="FunctionCancelled" xml:space="preserve">
    <value>操作取消</value>
  </data>
  <data name="InputEnchantment" xml:space="preserve">
    <value>输入附魔的名字（输入 c 添加自定义附魔，输入 q 进行排序）：</value>
  </data>
  <data name="InputItem" xml:space="preserve">
    <value>输入物品的名字（输入 exit 退出）：</value>
  </data>
  <data name="InputLanguageCode" xml:space="preserve">
    <value>输入语言代码切换语言（输入 exit 退出）：</value>
  </data>
  <data name="NotFoundEnchantmentFormat" xml:space="preserve">
    <value>无法找到名为 {0} 的附魔</value>
  </data>
  <data name="NotFoundItemFormat" xml:space="preserve">
    <value>无法找到名为 {0} 的物品</value>
  </data>
  <data name="StartOrdering" xml:space="preserve">
    <value>开始排序……</value>
  </data>
  <data name="InputLevel" xml:space="preserve">
    <value>输入等级：</value>
  </data>
  <data name="InputName" xml:space="preserve">
    <value>输入名称：</value>
  </data>
  <data name="InputWeight" xml:space="preserve">
    <value>输入权重：</value>
  </data>
  <data name="EnchantmentOption" xml:space="preserve">
    <value>附魔</value>
  </data>
  <data name="ItemArgument" xml:space="preserve">
    <value>物品</value>
  </data>
  <data name="LangArgument" xml:space="preserve">
    <value>代码</value>
  </data>
  <data name="PenaltyOption" xml:space="preserve">
    <value>惩罚</value>
  </data>
  <data name="UnknownCommand" xml:space="preserve">
    <value>未知命令</value>
  </data>
</root>